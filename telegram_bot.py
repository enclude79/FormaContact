#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_CHAT_ID:
    raise ValueError("ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_data[user_id] = {}
    
    keyboard = [
        [InlineKeyboardButton("üåü –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üåü", callback_data='new_request')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
üéâ *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ú–ò–† –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò!* üéâ

üè°‚ú® –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∂–¥–µ—Ç –≤–∞—Å! ‚ú®üè°

üåà –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:
üî• –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è  
üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

üí´ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏? üí´
–ñ–º–∏—Ç–µ —è—Ä–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá‚ú®
    """
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == 'new_request':
        user_data[user_id] = {'step': 'waiting_name'}
        await query.edit_message_text(
            "üåü *–ö–ê–ö –í–ê–° –ó–û–í–£–¢?* üåü\n\n"
            "‚ú® –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è:\n"
            "üí´ –ú—ã —Ö–æ—Ç–∏–º –∑–Ω–∞—Ç—å, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è! üí´",
            parse_mode='Markdown'
        )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    if user_id not in user_data:
        await update.message.reply_text(
            "üåà –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∫–æ–º–∞–Ω–¥—ã /start! üåà\n‚ú® –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∂–¥–µ—Ç! ‚ú®"
        )
        return
    
    current_step = user_data[user_id].get('step')
    
    if current_step == 'waiting_name':
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if len(message_text.strip()) < 2:
            await update.message.reply_text(
                "üé≠ –£–ø—Å! –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ! üé≠\n"
                "‚ú® –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∏–Ω–∏–º—É–º –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤ ‚ú®\n"
                "üí´ –ú—ã –≤–µ—Ä–∏–º –≤ –≤–∞—Å! üí´"
            )
            return
        
        user_data[user_id]['name'] = message_text.strip()
        user_data[user_id]['step'] = 'waiting_phone'
        
        await update.message.reply_text(
            "üéØ *–û–¢–õ–ò–ß–ù–û! –¢–ï–ü–ï–†–¨ –¢–ï–õ–ï–§–û–ù!* üéØ\n\n"
            "üì± –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n\n"
            "üá∑üá∫ *–†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞:*\n"
            "üåü +7 916 123 45 67\n"
            "üåü 8 (916) 123-45-67\n"
            "üåü 79161234567\n"
            "üåü 9161234567\n\n"
            "üåç *–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:*\n"
            "üî• +380 67 123 45 67 (–£–∫—Ä–∞–∏–Ω–∞)\n"
            "üî• +1 555 123 4567 (–°–®–ê/–ö–∞–Ω–∞–¥–∞)\n"
            "üî• +49 30 12345678 (–ì–µ—Ä–º–∞–Ω–∏—è)\n"
            "üî• +33 1 42 86 83 26 (–§—Ä–∞–Ω—Ü–∏—è)\n"
            "üî• +86 138 0013 8000 (–ö–∏—Ç–∞–π)\n"
            "üî• +44 20 7946 0958 (–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è)",
            parse_mode='Markdown'
        )
    
    elif current_step == 'waiting_phone':
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = clean_phone(message_text)
        if not is_valid_phone(phone):
            await update.message.reply_text(
                "üö® –£–ü–°! –ß–¢–û-–¢–û –ü–û–®–õ–û –ù–ï –¢–ê–ö! üö®\n\n"
                "üí° *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–æ–º–µ—Ä—É:*\n"
                "üéØ –û—Ç 7 –¥–æ 15 —Ü–∏—Ñ—Ä\n"
                "üéØ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª +\n"
                "üéØ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–ª–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞\n\n"
                "üåü *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—ã:*\n"
                "üá∑üá∫ *–†–æ—Å—Å–∏—è:*\n"
                "üí´ +7 916 123 45 67\n"
                "üí´ 8 (916) 123-45-67\n"
                "üí´ 79161234567\n\n"
                "üåç *–ú–∏—Ä:*\n"
                "üî• +380 67 123 45 67 (–£–∫—Ä–∞–∏–Ω–∞)\n"
                "üî• +1 555 123 4567 (–°–®–ê)\n"
                "üî• +49 30 12345678 (–ì–µ—Ä–º–∞–Ω–∏—è)\n"
                "üî• +86 138 0013 8000 (–ö–∏—Ç–∞–π)\n\n"
                "üí™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –£ –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è! üí™"
            )
            return
        
        user_data[user_id]['phone'] = format_phone(phone)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
        name = user_data[user_id]['name']
        phone = user_data[user_id]['phone']
        username = update.effective_user.username
        user_full_name = f"{update.effective_user.first_name or ''} {update.effective_user.last_name or ''}".strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = f"""üéä –ù–û–í–ê–Ø –ì–û–†–Ø–ß–ê–Ø –ó–ê–Ø–í–ö–ê! üéä

üåü –ò–º—è: {name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üÜî User ID: {user_id}
üë§ Telegram: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} ({user_full_name})
‚è∞ –í—Ä–µ–º—è: {update.message.date.strftime('%d.%m.%Y %H:%M:%S')}

üöÄ –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! üöÄ
üíé –î–µ–π—Å—Ç–≤—É–π—Ç–µ –±—ã—Å—Ç—Ä–æ! üíé"""
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=admin_message
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                "üéâ *–ü–û–¢–†–Ø–°–ê–Æ–©–ï! –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê!* üéâ\n\n"
                "‚ú® *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:* ‚ú®\n"
                f"üåü **–ò–º—è:** {name}\n"
                f"üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n\n"
                "üöÄ *–ß—Ç–æ –¥–∞–ª—å—à–µ?*\n"
                "üí´ –ù–∞—à —Å—É–ø–µ—Ä-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ –º—á–∏—Ç—Å—è –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É!\n"
                "üî• –°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç–µ –∑–≤–æ–Ω–æ–∫ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!\n"
                "üíé –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!\n\n"
                "üåà –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞—è–≤–∫—É? –ñ–º–∏—Ç–µ /start! üåà\n"
                "‚ú® –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! ‚ú®",
                parse_mode='Markdown'
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data[user_id]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            await update.message.reply_text(
                "üÜò –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞! üÜò\n"
                "üîß –ù–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —É–∂–µ —á–∏–Ω—è—Ç —ç—Ç–æ!\n"
                "üí´ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! üí´\n"
                "üåü –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º! üåü"
            )

def clean_phone(phone_str):
    """–û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return re.sub(r'[^\d+]', '', phone_str)

def is_valid_phone(phone):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º + –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    digits_only = phone.lstrip('+')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not digits_only.isdigit():
        return False
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ - 7 —Ü–∏—Ñ—Ä
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 15 —Ü–∏—Ñ—Ä (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç E.164)
    if len(digits_only) < 7 or len(digits_only) > 15:
        return False
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ - —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if phone.startswith('+7'):
        return len(digits_only) == 11
    elif phone.startswith('8'):
        return len(digits_only) == 11
    elif phone.startswith('7') and not phone.startswith('+'):
        return len(digits_only) == 11
    elif len(digits_only) == 10 and digits_only.startswith('9'):  # —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π –±–µ–∑ –∫–æ–¥–∞
        return True
    
    # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å + –≤ –Ω–∞—á–∞–ª–µ
    elif phone.startswith('+') and len(digits_only) >= 7:
        return True
    
    # –ù–æ–º–µ—Ä–∞ –±–µ–∑ + –Ω–æ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∫–æ–¥–æ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å 7, 8, 9)
    elif len(digits_only) >= 10 and not digits_only.startswith(('7', '8', '9')):
        return True
    
    return False

def format_phone(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º + –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    digits_only = phone.lstrip('+')
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
    if phone.startswith('+7') or (phone.startswith('8') and len(digits_only) == 11):
        if phone.startswith('8'):
            digits_only = '7' + digits_only[1:]  # –∑–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7
        elif phone.startswith('7') and not phone.startswith('+'):
            pass  # digits_only —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        elif len(digits_only) == 10 and digits_only.startswith('9'):
            digits_only = '7' + digits_only  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –†–æ—Å—Å–∏–∏
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä: +7 (XXX) XXX-XX-XX
        if len(digits_only) == 11 and digits_only.startswith('7'):
            return f"+7 ({digits_only[1:4]}) {digits_only[4:7]}-{digits_only[7:9]}-{digits_only[9:11]}"
    
    # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å + –≤ –Ω–∞—á–∞–ª–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not phone.startswith('+'):
        return '+' + digits_only
    
    return phone

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üåà *–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£* üåà

üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üåü /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üåü /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üöÄ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
üí´ –ù–∞–∂–º–∏—Ç–µ /start
üí´ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
üí´ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è
üí´ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
üí´ –ì–æ—Ç–æ–≤–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!

üî• *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:*
üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ: +7, 8, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ: –ª—é–±—ã–µ –Ω–æ–º–µ—Ä–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã

üíé –í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! üíé
‚ú® –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! ‚ú®
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üéâ Telegram –±–æ—Ç —Å —è—Ä–∫–∏–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω! üéâ")
    application.run_polling()

if __name__ == '__main__':
    main()