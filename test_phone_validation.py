#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re

def clean_phone(phone_str):
    """–û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return re.sub(r'[^\d+]', '', phone_str)

def is_valid_phone(phone):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º + –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    digits_only = phone.lstrip('+')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not digits_only.isdigit():
        return False
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ - 7 —Ü–∏—Ñ—Ä
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 15 —Ü–∏—Ñ—Ä (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç E.164)
    if len(digits_only) < 7 or len(digits_only) > 15:
        return False
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ - —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if phone.startswith('+7'):
        return len(digits_only) == 11
    elif phone.startswith('8'):
        return len(digits_only) == 11
    elif phone.startswith('7') and not phone.startswith('+'):
        return len(digits_only) == 11
    elif len(digits_only) == 10 and digits_only.startswith('9'):  # —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π –±–µ–∑ –∫–æ–¥–∞
        return True
    
    # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å + –≤ –Ω–∞—á–∞–ª–µ
    elif phone.startswith('+') and len(digits_only) >= 7:
        return True
    
    # –ù–æ–º–µ—Ä–∞ –±–µ–∑ + –Ω–æ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∫–æ–¥–æ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å 7, 8, 9)
    elif len(digits_only) >= 10 and not digits_only.startswith(('7', '8', '9')):
        return True
    
    return False

def format_phone(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    digits_only = clean_phone(phone).lstrip('+')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 8 –≤ 7
    if digits_only.startswith('8') and len(digits_only) == 11:
        digits_only = '7' + digits_only[1:]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    elif len(digits_only) == 10 and digits_only.startswith('9'):
        digits_only = '7' + digits_only
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7
    if len(digits_only) == 11 and digits_only.startswith('7'):
        return f"+7 ({digits_only[1:4]}) {digits_only[4:7]}-{digits_only[7:9]}-{digits_only[9:11]}"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
    return phone

def test_phone_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
        ("+7 916 123 45 67", True, "–†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Å +7"),
        ("8 (916) 123-45-67", True, "–†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Å 8"),
        ("79161234567", True, "–†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Å 7"),
        ("9161234567", True, "–†–æ—Å—Å–∏–π—Å–∫–∏–π –º–æ–±–∏–ª—å–Ω—ã–π –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã"),
        ("+7 916 386 33 03", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä"),
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        ("+380 67 123 45 67", True, "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä"),
        ("+1 555 123 4567", True, "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä"),
        ("+49 30 12345678", True, "–ù–µ–º–µ—Ü–∫–∏–π –Ω–æ–º–µ—Ä"),
        ("+33 1 42 34 56 78", True, "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –Ω–æ–º–µ—Ä"),
        ("+86 138 0013 8000", True, "–ö–∏—Ç–∞–π—Å–∫–∏–π –Ω–æ–º–µ—Ä"),
        ("12345678901", True, "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–µ–∑ +"),
        ("+44 20 7946 0958", True, "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä"),
        
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        ("+7 916 386 33 0", False, "–ù–µ–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä"),
        ("+7 916 386 3", False, "–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä"),
        ("123456", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (6 —Ü–∏—Ñ—Ä)"),
        ("1234567890123456", False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (16 —Ü–∏—Ñ—Ä)"),
        ("", False, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
        ("abc", False, "–ë—É–∫–≤—ã"),
        ("+", False, "–¢–æ–ª—å–∫–æ –ø–ª—é—Å"),
        ("++123456789", False, "–î–≤–æ–π–Ω–æ–π –ø–ª—é—Å"),
    ]
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("-" * 80)
    
    for phone, expected, description in test_cases:
        cleaned = clean_phone(phone)
        is_valid = is_valid_phone(cleaned)
        
        if is_valid:
            formatted = format_phone(cleaned)
        else:
            formatted = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
        
        status = "‚úÖ" if is_valid == expected else "‚ùå"
        
        print(f"{status} {description}")
        print(f"   –í—Ö–æ–¥–Ω–æ–π:     '{phone}'")
        print(f"   –û—á–∏—â–µ–Ω–Ω—ã–π:   '{cleaned}'")
        print(f"   –í–∞–ª–∏–¥–Ω—ã–π:    {is_valid}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π:   {expected}")
        print(f"   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {formatted}")
        print()

if __name__ == '__main__':
    test_phone_validation() 
 